services:

  mysql8:
    container_name: mysql_local
    image: 'mysql:8.2'
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: password
    restart: always
    ports:
      # To allow the host machine to access the ports below, modify the lines below.
      # For example, to allow the host to connect to port 3306 on the container, you would change
      # "3306" to "3306:3306". Where the first port is exposed to the host and the second is the container port.
      # See https://docs.docker.com/compose/compose-file/compose-file-v3/#ports for more information.
      - '3306:3306'
    volumes:
      - data-v8:/var/lib/mysql
    networks:
      - qizuna_network

  phpmyadmin:
    container_name: phpmyadmin_local
    image: arm64v8/phpmyadmin
    environment:
      PMA_HOST: mysql8
      PMA_USER: root
      PMA_PASSWORD: password
      UPLOAD_LIMIT: 500M
    ports:
      - '8080:80'
    restart: always
    networks:
      - qizuna_network
    depends_on:
      - mysql8

  ###> symfony/mailer ###
  mailer:
    container_name: mailer_local
    image: schickling/mailcatcher
    ports:
      - "1025:1025"
      - "1080:1080"
    restart: always
    networks:
      - qizuna_network
  ###< symfony/mailer ###

  gotenberg:
    container_name: gotenberg_local
    image: thecodingmachine/gotenberg:8
    restart: always
    ports:
      - 3000:3000
    networks:
      - qizuna_network

  meilisearch:
    container_name: meilisearch_local
    image: getmeili/meilisearch:v1.1.0
    restart: always
    ports:
      - "7700:7700"
    environment:
      MEILI_MASTER_KEY: qizuna
      MEILI_CONFIG_FILE_PATH: /config/config.toml
    volumes:
      - ./var/meili_data:/meili_data
      - ./config/meilisearch:/config
    networks:
      - qizuna_network

  redis:
    container_name: redis
    image: redis
    restart: always
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    ports:
      - "6379:6379"
    networks:
      - qizuna_network

  minio:
    container_name: s3_local
    image: 'quay.io/minio/minio:RELEASE.2023-07-07T07-13-57Z'
    restart: always
    ports:
      - '9900:9000'
      - '9901:9001'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: password
    volumes:
      # - './data/minio:/data/minio'
       - './data/minio2:/data/minio'
    command: 'minio server /data/minio --console-address ":9001"'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - 'http://localhost:9901/minio/health/live'
      retries: 3
      timeout: 5s

  rabbitmq:
    container_name: rabbitmq_local
    image: rabbitmq:3-management
    restart: always
    ports:
      - "5672:5672"  # Port pour AMQP
      - "15672:15672"  # Port pour l'interface de gestion
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - qizuna_network

  ngrok:
    container_name: ngrok_static
    image: ngrok/ngrok:latest
    network_mode: bridge
    extra_hosts:
      - "host.docker.internal:host-gateway"   # permet de résoudre host.docker.internal vers l’hôte
    environment:
      NGROK_AUTHTOKEN: "2zg6MK6qc1yQNxBzm3pZBmRz1uT_52PRDWYJVjVGKn8jzhNvf"
    command: >
      http
      --url=drake-organic-raccoon.ngrok-free.app
      --authtoken=2zg6MK6qc1yQNxBzm3pZBmRz1uT_52PRDWYJVjVGKn8jzhNvf
      --host-header=localhost:8000
      host.docker.internal:8000
    ports:
      - "4040:4040"

volumes:
  data:
  data-v8:
  sessions:
  minio:
    driver: local


networks:
  qizuna_network:
    driver: bridge

